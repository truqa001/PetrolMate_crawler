let FUEL_TYPES,puppeteer,StealthPlugin,AdblockerPlugin;_614‍.w("./fuel-types.mjs",[["FUEL_TYPES",["FUEL_TYPES"],function(v){FUEL_TYPES=v}]]);_614‍.w("puppeteer-extra",[["default",["puppeteer"],function(v){puppeteer=v}]]);_614‍.w("puppeteer-extra-plugin-stealth",[["default",["StealthPlugin"],function(v){StealthPlugin=v}]]);_614‍.w("puppeteer-extra-plugin-adblocker",[["default",["AdblockerPlugin"],function(v){AdblockerPlugin=v}]]);





puppeteer.use(StealthPlugin());
puppeteer.use(AdblockerPlugin({ blockTrackers: true }));

const args = [
    '--no-sandbox',
    '--disable-setuid-sandbox',
    '--disable-infobars',
    '--window-position=0,0',
    '--ignore-certifcate-errors',
    '--ignore-certifcate-errors-spki-list',
    '--user-agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3312.0 Safari/537.36"'
];


(async () => {
    const browser = await puppeteer.launch({
        headless: false,
        ...args
    });
    const page = await browser.newPage();
    page.setViewport({ width: 1280, height: 720 });
    await page.goto('https://fuelprice.io/', { waitUntil: 'networkidle2' });
    await page.type('#web-search', 'adelaide');

    const searchBtn = '#smartsubmit';
    await page.click(searchBtn);

    const searchResultSelector = '#min-price';
    await page.waitForSelector(searchResultSelector);
    await page.click(searchResultSelector);

    await page.select('select#fuel-type', FUEL_TYPES.PREMIUM_UNLEADED_95);
    await page.waitForNavigation();

    let data = [];
    let stationsCount = 0;
    // Extract data
    const dataaa = await page.evaluate(() => {
        const cheapestPrice = document.querySelector('.cheapest_price').textContent;

        return { cheapestPrice };
    });

    // Access the <ul> element by its selector
    const ulElement = await page.$('.cheapest-stations'); // Change the selector as needed
    let index = 0;

    if (ulElement) {
        // Get an array of all <li> elements within the <ul>
        await page.waitForSelector('li')
        const liElements = await ulElement.$$('li');
        stationsCount = liElements.length;

        for (const liElement of liElements) {
            //const imageURL = await liElement.$eval('img', img => img.getAttribute('src'));

            const stationDetails = await getStationDetails(liElement);
            data.push(stationDetails);
        }
    } else {
        throw new Error('<ul> element not found');
    }


    for (let i = 0; i < stationsCount; i++) {
        await page.waitForSelector('.cheapest-stations');
        const cheapestStations = await page.$$('.cheapest-stations li');

        const location = await getStationAddress(page, cheapestStations, i);

        const dataWithLocation = data.map((station, index) => index === i ? { ...station, location } : station)
        data = [...dataWithLocation];
    }


    _614‍.g.console.log('data', data)

    // dawait browser.close();
})();


async function getStationDetails(liElement) {
    // Extract station name
    const stationName = await liElement.$eval('strong', strong => strong.textContent);


    // Extract the text content within the <li> (assuming it's unstructured)
    const innerHTML = await liElement.evaluate(el => el.innerHTML);

    // Use regular expressions to extract relevant data from the unstructured text
    const priceMatch = innerHTML.match(/(\d+\.\d+)/); // Match the price (assuming it's a decimal number)
    const price = priceMatch ? priceMatch[0] : 'N/A'; // Set to 'N/A' if not found
    const lastUpdated = await liElement.$eval('.fuel-type-ago', element => element.textContent);
    const imageURL = innerHTML.match(/<img[^>]+src="([^">]+)"/)[1];

    return {
        stationName,
        imageURL,
        price,
        lastUpdated,
    }
}

async function getStationAddress(page, stations, index) {
    if (stations.length > 0) {
        // Get the URL of the second station with the cheapest price
        const stationURL = await page.evaluate(el => el.querySelector('a').getAttribute('href'), stations[index]);

        // Navigate to the station's page
        await page.goto('https://fuelprice.io' + stationURL);
        const addressElement = await page.$('.address')
        const url = await page.evaluate(el => el.querySelector('a').getAttribute('href'), addressElement);

        await page.goBack();


        return url
    } else {
        throw new Error('No cheapest stations found.');
    }
}