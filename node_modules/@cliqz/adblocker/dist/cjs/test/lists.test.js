"use strict";
/*!
 * Copyright (c) 2017-present Cliqz GmbH. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
require("mocha");
const lists_1 = require("../src/lists");
describe('#getLinesWithFilters', () => {
    it('get not lines if empty', () => {
        (0, chai_1.expect)((0, lists_1.getLinesWithFilters)('')).to.eql(new Set());
    });
    it('handle single filter', () => {
        (0, chai_1.expect)((0, lists_1.getLinesWithFilters)('||foo.com$badfilter')).to.eql(new Set(['||foo.com$badfilter']));
    });
    it('handle multiple filters', () => {
        (0, chai_1.expect)((0, lists_1.getLinesWithFilters)('||foo.com$badfilter\n||bar.co.uk')).to.eql(new Set(['||foo.com$badfilter', '||bar.co.uk']));
    });
    it('ignore empty lines', () => {
        (0, chai_1.expect)((0, lists_1.getLinesWithFilters)(`

||foo.com


bar.co.uk^*baz

      `)).to.eql(new Set(['||foo.com', 'bar.co.uk^*baz']));
    });
    it('ignore comments', () => {
        (0, chai_1.expect)((0, lists_1.getLinesWithFilters)(`
[Adblock Plus 2.0]
! this is a comment
||foo.com


!bar.co.uk^*baz

      `)).to.eql(new Set(['||foo.com']));
    });
});
describe('#generateDiff', () => {
    it('diff between empty strings', () => {
        (0, chai_1.expect)((0, lists_1.generateDiff)('', '')).to.eql({
            added: [],
            removed: [],
        });
    });
    it('same filters', () => {
        (0, chai_1.expect)((0, lists_1.generateDiff)(`
||foo.com

bar.baz
*ads*

    `, `
! comment

bar.baz
*ads*
||foo.com
    `)).to.eql({
            added: [],
            removed: [],
        });
    });
    it('add filters from empty', () => {
        (0, chai_1.expect)((0, lists_1.generateDiff)('', '||foo.com')).to.eql({
            added: ['||foo.com'],
            removed: [],
        });
    });
    it('remove filters', () => {
        (0, chai_1.expect)((0, lists_1.generateDiff)('||foo.com', '')).to.eql({
            added: [],
            removed: ['||foo.com'],
        });
    });
    it('handle filter renaming', () => {
        (0, chai_1.expect)((0, lists_1.generateDiff)('||foo.com$domain=foo.com|bar.com', '||foo.com$domain=bar.com|foo.com')).to.eql({
            added: [],
            removed: [],
        });
    });
});
describe('#f', () => {
    it('handles CosmeticFilter', () => {
        const filter = (0, lists_1.f) `##.selector`;
        (0, chai_1.expect)(filter).not.to.be.null;
        if (filter !== null) {
            (0, chai_1.expect)(filter.isCosmeticFilter()).to.be.true;
        }
    });
    it('handles NetworkFitler', () => {
        const filter = (0, lists_1.f) `||foo.com`;
        (0, chai_1.expect)(filter).not.to.be.null;
        if (filter !== null) {
            (0, chai_1.expect)(filter.isNetworkFilter()).to.be.true;
        }
    });
    it('returns null for invalid filter', () => {
        (0, chai_1.expect)((0, lists_1.f) `#$#~~~`).to.be.null;
    });
});
describe('#mergeDiffs', () => {
    it('merges one diff', () => {
        const diff = {
            added: ['||foo.com'],
            removed: ['||bar.com'],
        };
        (0, chai_1.expect)((0, lists_1.mergeDiffs)([diff])).to.eql(diff);
    });
    it('merges several diffs', () => {
        (0, chai_1.expect)((0, lists_1.mergeDiffs)([
            { added: ['foo.com', 'baz.com'] },
            { removed: ['foo.com'] },
            { added: ['bar.com'], removed: ['foo.com'] },
            { removed: ['bar.com'] },
        ])).to.eql({
            added: ['baz.com'],
            removed: ['foo.com', 'bar.com'],
        });
    });
});
//# sourceMappingURL=lists.test.js.map